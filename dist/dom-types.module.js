const t={style:!0,data:!0};function n(t,n){const s={};let o=!1;for(const e in t){void 0!==t[e]&&void 0===n[e]&&(s[e]=void 0,o=!0)}for(const e in n){const r=n[e];t[e]!==r&&(s[e]=r,o=!0)}return o?s:null}function s(n,s){for(const o in t)if(n[o]){if(!s[o])return!1;const t=n[o],e=s[o];if(t!==e){for(const n in e)if(t[n]!==e[n])return!1;for(const n in t)if(void 0===e[n]&&void 0!==t[n])return!1}}else if(s[o])return!1;for(const o in s)if(n[o]!==s[o]&&!t[o])return!1;for(const o in n)if(void 0===s[o]&&void 0!==n[o]&&!t[o])return!1;return!0}function o(t,n){const s=n?Object.assign({},t):t;s.class&&(s.className=s.className?s.class+' '+s.className:s.class),delete s.class,'string'==typeof s.style&&(s.style=e(s.style));for(const t in s)t.startsWith('aria')&&!t.startsWith('aria-')&&(s['aria-'+t.slice(4).toLowerCase()]=s[t],delete s[t]);return s}function e(t){const n=t.replace(/\/\*(.|\s)*?\*\//g,' ').replace(/\s+/g,' ').trim();if(!n)return{};const s=n.split(';').map((t=>{const n=t.indexOf(':');return-1===n?[t.trim()]:[t.slice(0,n).trim(),t.slice(n+1).trim()]})),o={};for(const[t,n]of s)t&&(o[t.replace(/\W+\w/g,(t=>t.slice(-1).toUpperCase()))]=n);return o}function r(...t){const n={};for(const s of t)s&&i(s,n,' ');return Object.keys(n).join(' ')}function i(t,n,s=''){switch(typeof t){case'string':if(s)for(const o of t.split(s))o&&(n[o]=!0);else n[t]=!0;break;case'object':if(t.constructor===Object)for(const s in t)s&&t[s]&&(n[s]=!0);else for(const o of t)if(o&&'string'==typeof o)if(s)for(const t of o.split(s))t&&(n[t]=!0);else n[o]=!0}}function c(t,n){if((t=t||'')===(n=n||''))return null;const s=t.split(' '),o=n.split(' '),e={};let r=null;if(s)for(const t of s)!t||o&&-1!==o.indexOf(t)||(e[t]=r=!1);if(o)for(const t of o)!t||s&&-1!==s.indexOf(t)||(e[t]=r=!0);return null!==r?e:null}export{r as classNames,o as cleanDOMProps,i as collectNamesTo,s as equalDOMProps,c as getClassNameDiffs,n as getDictionaryDiffs,e as parseDOMStyle};
